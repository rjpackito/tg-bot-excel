import { Telegraf } from "telegraf";
import { message } from "telegraf/filters";
import { InlineQueryResult } from "telegraf/typings/core/types/typegram";
import * as dotenv from "dotenv";
import { GoogleSpreadsheet } from "google-spreadsheet";
import { JWT } from "google-auth-library";

dotenv.config();

const bot = new Telegraf(process.env["BOT_TOKEN"] ?? "");
const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: process.env["DOC_EMAIL"] ?? "",
  key: process.env["DOC_KEY"] ?? "",
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});
const doc = new GoogleSpreadsheet(
  process.env["DOC_ID"] ?? "",
  serviceAccountAuth
);
await doc.loadInfo(); // loads document properties and worksheets
bot.telegram.setChatMenuButton({ menuButton: { type: "commands" } });
bot.command("quit", async (ctx) => {
  // Explicit usage
  await ctx.telegram.leaveChat(ctx.message.chat.id);

  // Using context shortcut
  await ctx.leaveChat();
});

bot.on(message("text"), async (ctx) => {
  // Explicit usage
  await ctx.telegram.sendMessage(
    ctx.message.chat.id,
    `Hello ${ctx.state.role}`
  );

  await ctx.telegram.setMyCommands([
    {
      command: "help",
      description: "Помощь",
    },
    { command: "test", description: "Тест" },
  ]);
  // Using context shortcut
  //await ctx.reply(`Hello ${ctx.state.role}`);
});

bot.on("callback_query", async (ctx) => {
  // Explicit usage
  await ctx.telegram.answerCbQuery(ctx.callbackQuery.id);

  // Using context shortcut
  await ctx.answerCbQuery();
});

bot.on("inline_query", async (ctx) => {
  const result: readonly InlineQueryResult[] = [];
  // Explicit usage
  await ctx.telegram.answerInlineQuery(ctx.inlineQuery.id, result);

  // Using context shortcut
  await ctx.answerInlineQuery(result);
});

bot.launch();

// Enable graceful stop
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
